buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion "${project.buildToolsVersion}"

    defaultConfig {
        applicationId 'com.iopixel.watchface.wear'
        minSdkVersion 19
        targetSdkVersion 24
        versionCode buildNumber
        versionName buildProperties['versionName']

        buildConfigField 'String', 'GIT_SHA1', '"' + gitSha1() + '"'
        buildConfigField 'String', 'BUILD_DATE', '"' + buildDate() + '"'
        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'

        resConfigs 'en', 'fr'

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file(buildProperties['key-store'])
            storePassword buildProperties['key-store-password']
            keyAlias buildProperties['key-alias']
            keyPassword buildProperties['key-alias-password']
        }
    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'CRASH_REPORT', 'false'
        }

        release {
            buildConfigField 'boolean', 'CRASH_REPORT', 'true'

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

def releaseTask = tasks.create('release')
releaseTask << {
    // Increment build number
    buildNumberProperties['build.number'] = (buildNumber + 1).toString()
    buildNumberProperties.store(buildNumberFile.newWriter(), null)
}

android.applicationVariants.all { variant ->
    // Create new copy tasks, for release builds
    if (variant.buildType.name == 'release') {
        variant.outputs.each { output ->
            def apkName = "${globalProjectName}-${android.defaultConfig.versionCode}-${variant.flavorName}-signed.apk"
            // Copy the apk to the 'etc' folder
            def copyApkTask = tasks.create("copy${variant.name.capitalize()}ApkToEtc", Copy)
            copyApkTask.from(output.outputFile)
            copyApkTask.into('../etc/apk')
            copyApkTask.rename output.outputFile.name, apkName
            copyApkTask.dependsOn variant.assemble

            releaseTask.dependsOn copyApkTask

            // Copy the apk to the deploy folder
            copyApkTask = tasks.create("copy${variant.name.capitalize()}ApkToDeploy", Copy)
            copyApkTask.from(output.outputFile)
            copyApkTask.into(buildProperties['deploy-folder'])
            copyApkTask.rename output.outputFile.name, apkName
            copyApkTask.dependsOn variant.assemble

            releaseTask.dependsOn copyApkTask
        }

        // Commented for now since we don't obfuscate (so we don't have a mapping.txt file)
//        // Copy the proguard mapping to the 'etc' folder
//        def copyMappingTask = tasks.create("copy${variant.name.capitalize()}ProguardMappingToEtc", Copy)
//        copyMappingTask.from(variant.mappingFile)
//        copyMappingTask.into('../etc/proguard')
//        copyMappingTask.rename variant.mappingFile.name, "mapping-${android.defaultConfig.versionCode}-${variant.flavorName}.txt"
//        copyMappingTask.dependsOn variant.assemble
//
//        releaseTask.dependsOn copyMappingTask
    }
}

dependencies {
    // Support library
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:preference-v7:${supportLibVersion}"
    compile "com.android.support:preference-v14:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"

    // Google Play Services
    compile "com.google.android.gms:play-services-gcm:${playServicesVersion}"

    // Common module
    compile project(':common')

    // Prefs
    apt 'org.jraf:prefs-compiler:1.0.1'
    compile 'org.jraf:prefs:1.0.1'

    // Other libs
    compile 'com.squareup.okhttp3:okhttp:3.1.2'
    compile 'com.squareup.picasso:picasso:2.5.2'
//    compile 'org.zeroturnaround:zt-zip:1.9'
    compile 'com.github.hotchemi:permissionsdispatcher:2.1.3'
    apt 'com.github.hotchemi:permissionsdispatcher-processor:2.1.3'
    compile 'org.greenrobot:eventbus:3.0.0'

    // Bundle the wear app inside this one
    wearApp project(':wear')
}
